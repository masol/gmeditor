//////////////////////////////////////////////////////////////////////////////
//  Copyright (C) 2013 by sanpolo CO.LTD                                    //
//                                                                          //
//  This file is part of GMEditor                                           //
//                                                                          //
//  GMEditor is free software; you can redistribute it and/or modify it     //
//  under the terms of the LGPL License.                                    //
//                                                                          //
//  GMEditor is distributed in the hope that it will be useful,but WITHOUT  //
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY      //
//  or FITNESS FOR A PARTICULAR PURPOSE.                                    //
//                                                                          //
//  You should have received a copy of the LGPL License along with this     //
//  program.  If not, see <http://www.render001.com/gmeditor/licenses>.     //
//                                                                          //
//  GMEditor website: http://www.render001.com/gmeditor                     //
//////////////////////////////////////////////////////////////////////////////

#ifndef GME_CONFIG_H
#define GME_CONFIG_H

// The configured options and settings for gme

#define GME_VERSION_MAJOR "@GME_VERSION_MAJOR@"
#define GME_VERSION_MINOR "@GME_VERSION_MINOR@"

#ifdef  _DEBUG

    #include <iostream>
    
    template<class T>
    inline  void    GME_TRACE(T a){
        std::cerr << a << std::endl;
    }
    
    template<class T1,class T2>
    inline  void    GME_TRACE(T1 a,T2 b){
        std::cerr << a << b << std::endl;
    }
    
    template<class T1,class T2,class T3>
    inline  void    GME_TRACE(T1 a, T2 b,T3 c){
        std::cerr << a << b << c << std::endl;
    }
    template<class T1,class T2,class T3,class T4>
    inline  void    GME_TRACE(T1 a, T2 b,T3 c,T4 d){
        std::cerr << a << b << c << d << std::endl;
    }
    template<class T1,class T2,class T3,class T4,class T5>
    inline  void    GME_TRACE(T1 a, T2 b,T3 c,T4 d,T5 e){
        std::cerr << a << b << c << d << e << std::endl;
    }
    template<class T1,class T2,class T3,class T4,class T5,class T6>
    inline  void    GME_TRACE(T1 a, T2 b,T3 c,T4 d,T5 e,T6 f){
        std::cerr << a << b << c << d << e << f << std::endl;
    }
    template<class T1,class T2,class T3,class T4,class T5,class T6,class T7>
    inline  void    GME_TRACE(T1 a, T2 b,T3 c,T4 d,T5 e,T6 f,T7 g){
        std::cerr << a << b << c << d << e << f << g << std::endl;
    }
#else
    template<class T>
    inline  void    GME_TRACE(T){
    }
    template<class T1,class T2>
    inline  void    GME_TRACE(T1,T2){
    }
    template<class T1,class T2,class T3>
    inline  void    GME_TRACE(T1, T2,T3){
    }
    template<class T1,class T2,class T3,class T4>
    inline  void    GME_TRACE(T1, T2,T3,T4){
    }
    template<class T1,class T2,class T3,class T4,class T5>
    inline  void    GME_TRACE(T1, T2,T3,T4,T5){
    }
    template<class T1,class T2,class T3,class T4,class T5,class T6>
    inline  void    GME_TRACE(T1, T2,T3,T4,T5,T6){
    }
    template<class T1,class T2,class T3,class T4,class T5,class T6,class T7>
    inline  void    GME_TRACE(T1, T2,T3,T4,T5,T6,T7){
    }
#endif

#endif	/* GME_CONFIG_H */
